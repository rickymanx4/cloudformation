AWSTemplateFormatVersion: 2010-09-09 
Parameters:
# 파라미터는 stack 생성할 때 기본적인 선택을 할 수도 있고 reference로 활용 가능
# 대부분은 고정으로 했는데 AllowdPattern 을 사용해서 원하는 내용을 추가하면 stack 생성시 선택 가능
# reference 하면 default로 선택됨
  InstanceTypeParameter: 
    Type: String 
    Default: t2.small
    Description: Enter instance size. 
  WorkstationIp:
    Type: String
    Description: The IP address of the workstation that can SSH into the instance. 
  AMI:
    Type: String
    Default: ami-052c9ea013e6e3567                        
    Description: Amazon Linux 2023 AMI
# 본인의 region에 따라 ami가 다름    
  Key:
    Type: String
    Description: The key used to access the instance. 
    Default: ec2-key
# 자신이 사용할 key 입력   

# RDS 때문에 아래부분 작성
  DBInstanceID:
    Default: mydbinstance
    Description: My database instance
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: >-
      Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.       
  DBName:
    Default: masterdb
    Description: My database
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.    
  DBInstanceClass:
    Default: db.m5.large
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
  DBAllocatedStorage:
    Default: '50'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '20'
    MaxValue: '65536'
    ConstraintDescription: must be between 20 and 65536 GiB.
  DBUsername:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
# stack 생성중에 DBusername 과 DBpassword를 요구하는데 RDS 접속을 위한 내용임    
  DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '6'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.                                  
  EnableReadReplica:
    Description: Enable the ReadReplica
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    ConstraintDescription: must be true or false. 
# replica RDS 사용    
  MultiAZ:
    Description: Multi-AZ master database
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    ConstraintDescription: must be true or false.
# RDS MultiAZ 사용    
  
Resources: 
# 리소스는 우리가 사용하는 모든 것들을 생성
# !Ref 와 !GetAtt를 주로 많이사용하는데 !Ref는 CloudFormation에서 작성한 resource들을 
# 참조하는 것이고, !GetAtt는 cloudformation으로 생성된 resource 중에 필요한 정보를 참조하는 것임
  VPC:                                                   
    Type: AWS::EC2::VPC 
    Properties:
      CidrBlock: 216.0.0.0/16                             
      EnableDnsSupport: true 
      EnableDnsHostnames: true 
      InstanceTenancy: default 
      Tags:
        - Key: Name 
          Value: ProjectVPC
  InternetGateway:                                         
    Type: AWS::EC2::InternetGateway 
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment 
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
# internetgateway를 vpc에 attach 함      
  Subnet1:
    Type: AWS::EC2::Subnet 
    Properties:
      AvailabilityZone: us-west-2a
      VpcId: !Ref VPC
      CidrBlock: 216.0.10.0/24 
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name 
          Value: Pub01Subnet
  Subnet2:
    Type: AWS::EC2::Subnet 
    Properties:
      AvailabilityZone: us-west-2a                     
      VpcId: !Ref VPC
      CidrBlock: 216.0.20.0/24 
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name 
          Value: Web01Subnet
  Subnet3:
    Type: AWS::EC2::Subnet 
    Properties:
      AvailabilityZone: us-west-2a                     
      VpcId: !Ref VPC
      CidrBlock: 216.0.30.0/24 
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name 
          Value: Was01Subnet
  Subnet4:
    Type: AWS::EC2::Subnet 
    Properties:
      AvailabilityZone: us-west-2a 
      VpcId: !Ref VPC
      CidrBlock: 216.0.40.0/24 
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name 
          Value: DB01Subnet
  Subnet5:
    Type: AWS::EC2::Subnet 
    Properties:
      AvailabilityZone: us-west-2b                     
      VpcId: !Ref VPC
      CidrBlock: 216.0.110.0/24 
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name 
          Value: Pub02Subnet
  Subnet6:
    Type: AWS::EC2::Subnet 
    Properties:
      AvailabilityZone: us-west-2b                     
      VpcId: !Ref VPC
      CidrBlock: 216.0.120.0/24 
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name 
          Value: Web02Subnet
  Subnet7:
    Type: AWS::EC2::Subnet 
    Properties:
      AvailabilityZone: us-west-2b                     
      VpcId: !Ref VPC
      CidrBlock: 216.0.130.0/24 
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name 
          Value: Was02Subnet
  Subnet8:
    Type: AWS::EC2::Subnet 
    Properties:
      AvailabilityZone: us-west-2b         
      VpcId: !Ref VPC
      CidrBlock: 216.0.140.0/24 
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name 
          Value: DB02Subnet
  RouteTableA:
    Type: AWS::EC2::RouteTable 
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name 
          Value: Public-RT
  RouteTableB:
    Type: AWS::EC2::RouteTable 
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name 
          Value: Private-RT
  InternetRoute:
    Type: AWS::EC2::Route 
    DependsOn: InternetGateway 
    Properties:
      DestinationCidrBlock: 0.0.0.0/0 
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTableA
# internet gateway를 routing table에 설정      
  NATGateway:
   Type: AWS::EC2::NatGateway
   Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      SubnetId: !Ref Subnet5
      Tags:
      - Key: Name
        Value: Project-NGW
  RouteNATGateway:
    DependsOn: NATGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableB
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway
# natgateway를 생성 후 routingtable에 설정      
  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties:
      RouteTableId: !Ref RouteTableA
      SubnetId: !Ref Subnet1
  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties:
      RouteTableId: !Ref RouteTableA
      SubnetId: !Ref Subnet5
  SubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties:
      RouteTableId: !Ref RouteTableB
      SubnetId: !Ref Subnet3
  SubnetRouteTableAssociation4:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties:
      RouteTableId: !Ref RouteTableB
      SubnetId: !Ref Subnet7
  SubnetRouteTableAssociation5:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties:
      RouteTableId: !Ref RouteTableB
      SubnetId: !Ref Subnet2
  SubnetRouteTableAssociation6:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties:
      RouteTableId: !Ref RouteTableB
      SubnetId: !Ref Subnet6
# subnet을 routing table 에 설정      
  PublicSG:
    Type: AWS::EC2::SecurityGroup 
    Properties:
      GroupName: "PublicSG"
      GroupDescription: "SSH traffic in, all traffic out." 
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: '22' 
          ToPort: '22' 
          CidrIp: 0.0.0.0/0          
      SecurityGroupEgress: 
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: Public-bastion-SG        
  WebSG:
    Type: AWS::EC2::SecurityGroup 
    Properties:
      GroupName: "WebSG"
      GroupDescription: "SSH and web traffic in, all traffic out." 
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: '22' 
          ToPort: '22' 
          SourceSecurityGroupId: !Ref PublicSG
        - IpProtocol: tcp
          FromPort: '80' 
          ToPort: '80' 
          SourceSecurityGroupId: !Ref EXALBSG
      SecurityGroupEgress: 
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: Web-SG
  INALBSG:
    Type: AWS::EC2::SecurityGroup 
    Properties:
      GroupName: "INALBSG"
      GroupDescription: "tomcat traffic in, all traffic out." 
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: '8009' 
          ToPort: '8009' 
          SourceSecurityGroupId: !Ref WebSG
      SecurityGroupEgress: 
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: Internal-ALB-SG
  WasSG:
    Type: AWS::EC2::SecurityGroup 
    Properties:
      GroupName: "WASSG"
      GroupDescription: "SSH and web traffic in, all traffic out." 
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: '22' 
          ToPort: '22' 
          SourceSecurityGroupId: !Ref  PublicSG
        - IpProtocol: tcp
          FromPort: '8009' 
          ToPort: '8009' 
          SourceSecurityGroupId: !Ref  INALBSG
      SecurityGroupEgress: 
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: Was-SG
  DBSG:
    Type: AWS::EC2::SecurityGroup 
    Properties:
      GroupName: "DBSG"
      GroupDescription: "Mariadb traffic in, all traffic out." 
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: '3306' 
          ToPort: '3306' 
          SourceSecurityGroupId: !Ref  WasSG     
      SecurityGroupEgress: 
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: DB-SG
  EXALBSG:
    Type: AWS::EC2::SecurityGroup 
    Properties:
      GroupName: "ExALBSG"
      GroupDescription: "Web traffic in, all traffic out." 
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: '80' 
          ToPort: '80' 
          CidrIp: 0.0.0.0/0                    
      SecurityGroupEgress: 
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: External-ALB-SG
# 보안그룹은 인바운드 아웃바운드 다 수량 설정 가능        
  ElasticIP:
    Type: AWS::EC2::EIP 
    Properties:
      Domain: VPC      
  EC2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ec2-instance-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
# IAM Role 생성      
  RolePolicies:
    Type: AWS::IAM::Policy
    DependsOn:
      - Linux1
    Properties:
      PolicyName: InstancePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 's3:*'
            Resource: '*'
      Roles:
        - !Ref EC2IAMRole
# IAM Role의 권한(정책) 설정
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: InstanceProfile
      Path: "/"
      Roles: 
        - !Ref EC2IAMRole   
# 인스턴스에 IAM롤을 부여하기 위한 설정              
  Linux1:
    Type: 'AWS::EC2::Instance' 
    Properties:
      SubnetId: !Ref Subnet1
      ImageId: !Ref AMI 
      InstanceType: !Ref InstanceTypeParameter 
      KeyName: !Ref Key
      SecurityGroupIds: 
        - Ref: PublicSG 
      IamInstanceProfile: !Ref InstanceProfile        
      Tags:
        -
          Key: Appplication 
          Value: Linux Server
        -
          Key: Domain 
          Value: None
        -
          Key: Environment 
          Value: Test
        -
          Key: LifeTime 
          Value: Transient
        -
          Key: Name
          Value: Bastion-Host
        -
          Key: OS 
          Value: Linux
        -
          Key: OwnerContact
          Value: "@matthewcasperson"    
        -
          Key: Purpose
          Value: Support Test Instance 
        -
          Key: Source
          Value: CloudForation Script in Octopus Deploy 
      UserData:
        Fn::Base64: |
          #cloud-boothook
          #!/bin/bash
          sudo hostnamectl set-hostname bastion.example.com
          sudo bash
          sudo dnf install -y httpd               
          sudo aws s3 cp s3://cf-templates-1x0jo9mn6dpu2-us-west-2/data/ec2-key.pem /root/
          sudo systemctl enable --now httpd
          sudo chmod 600 /root/ec2-key.pem          
# bastion host instance 생성          
  LCWeb:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-052c9ea013e6e3567  
      InstanceType: t2.small
      InstanceMonitoring: true
      KeyName: !Ref Key
      LaunchConfigurationName: webserverLC
      IamInstanceProfile: !Ref InstanceProfile      
      SecurityGroups:
        - !Ref WebSG
      UserData:
        Fn::Base64: |
          #cloud-boothook
          #!/bin/bash
          sudo dnf install -y httpd
          sudo rm -rf /etc/httpd/conf/httpd.conf
          sudo aws s3 cp s3://cf-templates-1x0jo9mn6dpu2-us-east-2/web/httpd.conf /root/etc/httpd/conf/
          sudo aws s3 cp s3://cf-templates-1x0jo9mn6dpu2-us-east-2/web/workers.properties /root/etc/httpd/conf/
          sudo wget https://dlcdn.apache.org/tomcat/tomcat-connectors/jk/tomcat-connectors-1.2.49-src.tar.gz
          sudo dnf install -y autoconf libtool httpd-devel
          sudo tar -xvzf tomcat-connectors-1.2.49-src.tar.gz
          cd tomcat-connectors-1.2.49-src/native
          sudo ./buildconf.sh
          sudo ./configure --with-apxs=/usr/bin/apxs
          sudo make && make install
          sudo dnf install -y stress
          sudo systemctl enable --now httpd
          echo 'hello world' > /var/www/html/index.html        
# autoscaling으로 ec2 생성시 기본 설정          
# userdata 오류 발생시 직접 입력, 특히, /etc/httpd/conf/workers.properties 에 ExALB ip host 작성하기

  EXALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: webserverALB
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref EXALBSG
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet5
# LoadBalancer 생성
  EXTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Name: ExternalTarget
      Port: 80
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
# Target group 생성
  EXALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EXTargetGroup   
      LoadBalancerArn: !Ref EXALB
      Port: 80
      Protocol: HTTP
# listener 생성
  EXASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: webserverASG
      VPCZoneIdentifier:
        - !Ref Subnet2
        - !Ref Subnet6
      Cooldown: 100
      LaunchConfigurationName: !Ref LCWeb
      MaxSize: 6
      MinSize: 2
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref EXTargetGroup
      Tags:
        - Key: Name
          Value: Web-asg
          PropagateAtLaunch: true
# autoscaling group 생성
# 아래 설정을 하면 autoscaling policy를 정할 수 있다.
#  TargetTrackingScalingPolicy:
#    Type: AWS::ApplicationAutoScaling::ScalingPolicy
#    Properties:
#      PolicyName: cpu75-target-tracking-scaling-policy
#      PolicyType: TargetTrackingScaling
#      ScalingTargetId: !Ref ScalableTarget
#      TargetTrackingScalingPolicyConfiguration:
 #       TargetValue: 75.0
 #       ScaleInCooldown: 60
 #       ScaleOutCooldown: 60
 #       PredefinedMetricSpecification:
 #         PredefinedMetricType: ECSServiceAverageCPUUtilization          
  LCWas:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-052c9ea013e6e3567  
      InstanceType: t2.small
      InstanceMonitoring: true
      KeyName: !Ref Key
      LaunchConfigurationName: wasserverLC
      IamInstanceProfile: !Ref InstanceProfile      
      SecurityGroups:
        - !Ref WasSG
      UserData:
        Fn::Base64: |
          #cloud-boothook
          #!/bin/bash
          sudo dnf install java-1.8* -y
          wget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.99/bin/apache-tomcat-8.5.99.tar.gz
          tar xvfz apache-tomcat-8.5.99.tar.gz
          sudo mv apache-tomcat-8.5.99 /usr/local/tomcat8.5
          sudo rm -rf /usr/local/tomcat8.5/webapps/*
          sudo aws s3 cp s3://cf-templates-1x0jo9mn6dpu2-us-east-2/was/ROOT.war /root/usr/local/tomcat8.5/webapps/
          sudo rm -rf /usr/local/tomcat8.5/conf/server.xml
          sudo aws s3 cp s3://cf-templates-1x0jo9mn6dpu2-us-east-2/was/server.xml /root/usr/local/tomcat8.5/conf/
          sudo aws s3 cp s3://cf-templates-1x0jo9mn6dpu2-us-east-2/was/tomcat.service /root/usr/lib/systemd/system/
          sudo systemctl daemon-reload
          sudo systemctl enable tomcat
          sudo systemctl start tomcat        
# # userdata 오류 발생시 직접 입력
  INALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: wasserverALB
      Type: network
      Scheme: internal
      SecurityGroups:
        - !Ref INALBSG
      Subnets:
        - !Ref Subnet2
        - !Ref Subnet6

  INTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Name: InternalTarget
      Port: 8009
      Protocol: TCP
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
# HealthCheckProtocol은 TCP로 설정이 안되서 AWS에서 수동 설정
  INALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref INTargetGroup   
      LoadBalancerArn: !Ref INALB
      Port: 8009
      Protocol: TCP

  INASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: wasserverASG
      VPCZoneIdentifier:
        - !Ref Subnet3
        - !Ref Subnet7
      Cooldown: 100
      LaunchConfigurationName: !Ref LCWas
      MaxSize: 6
      MinSize: 2
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref INTargetGroup
      Tags:
        - Key: Name
          Value: Was-asg
          PropagateAtLaunch: true
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'     
    Properties:
      DistributionConfig:
        Comment: 'Cloudfront Distribution pointing ALB Origin'
        Origins:
          - DomainName: !GetAtt EXALB.DNSName
            Id: !Ref EXALB
            CustomOriginConfig:              
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
              OriginKeepaliveTimeout: 5
              OriginReadTimeout: 30
              OriginSSLProtocols: 
                - TLSv1.2
        Enabled: true
        HttpVersion: 'http2'
        PriceClass: PriceClass_All
        DefaultCacheBehavior:        
          AllowedMethods:
            - GET
            - HEAD
            - DELETE
            - OPTIONS
            - PATCH
            - POST
            - PUT         
          ForwardedValues: 
            Cookies: 
              Forward: all
            Headers: 
              - '*'
            QueryString: true
            QueryStringCacheKeys: 
              - bno                
          SmoothStreaming: 'false'
          TargetOriginId: !Ref 'EXALB'
          ViewerProtocolPolicy: allow-all
# CloudFront 설정          
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: my-sns-topic
      Subscription:
        - Endpoint: rickymanx4@naver.com
          Protocol: email
# SNS 설정          
  CPUUtilizationAlarmA:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - Ref: MySNSTopic
      AlarmName: web-Alarms
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 2
      Threshold: 40
      TreatMissingData: breaching
      OKActions: 
        - Ref: MySNSTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref EXASG          
  CPUUtilizationAlarmB:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - Ref: MySNSTopic
      AlarmName: was-Alarms
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 2
      Threshold: 40
      TreatMissingData: breaching
      OKActions: 
        - Ref: MySNSTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref INASG 
# cloudwatch 설정                   
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS DB subnet group
      SubnetIds:
      - !Ref Subnet4
      - !Ref Subnet8
      Tags:
      - Key: Name
        Value: DatabaseSubnet 
# RDS를 위한 subnet                   
  MasterDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref 'DBName'
      AllocatedStorage: !Ref 'DBAllocatedStorage'
      DBInstanceClass: !Ref 'DBInstanceClass'
      Engine: MariaDB
      EngineVersion: "10.11.6" 
      MasterUsername: !Ref 'DBUsername'
      MasterUserPassword: !Ref 'DBPassword'
      MultiAZ: !Ref 'MultiAZ'
      Tags:
      - Key: Name
        Value: Master Database
      StorageType: Standard
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups: 
      - !Ref DBSG
      PubliclyAccessible: false   
# RDS instance(primary)      
  ReplicaDB:
    Type: AWS::RDS::DBInstance
    Properties:
      SourceDBInstanceIdentifier: !Ref 'MasterDB'
      Tags:
      - Key: Name
        Value: Read Replica Database 
# RDS Replica        
